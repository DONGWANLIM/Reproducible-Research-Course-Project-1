steps = ifelse(is.na(activity$steps), yes = imputedSteps, no = activity$steps))
#Form the new dataset with the imputed missing values.
totalActivityImputed <- aggregate(steps ~ date, activityImputed, sum)
#Change col names
names(totalActivityImputed) <- c("date", "dailySteps")
#Test the new dataset to check if it still has any missing values -
sum(is.na(totalActivityImputed$dailySteps))
#Make a histogram of the total number of steps taken each day and Calculate and report the mean and median total number of steps taken per day. Do these values differ from the estimates from the first part of the assignment? What is the impact of imputing missing data on the estimates of the total daily number of steps?
#Convert the data set into a data frame to be able to use ggplot2
totalImputedStepsdf <- data.frame(totalActivityImputed)
#Plot a histogram using ggplot2
p <- ggplot(totalImputedStepsdf, aes(x = dailySteps)) +
geom_histogram(breaks = seq(0, 25000, by = 2500), fill = "#83CAFF", col = "black") +
ylim(0, 30) +
xlab("Total Steps Taken Per Day") +
ylab("Frequency") +
ggtitle("Total Number of Steps Taken on a Day") +
theme_calc(base_family = "serif")
print(p)
#The mean of the total number of steps taken per day is:
mean(totalActivityImputed$dailySteps)
#The median of the total number of steps taken per day is:
median(totalActivityImputed$dailySteps)
##Question 4 - Are there differences in activity patterns between weekdays and weekends?
#Create a new factor variable in the dataset with two levels – “weekday” and “weekend” indicating whether a given date is a weekday or weekend day.
#Update format of the dates
activity$date <- as.Date(strptime(activity$date, format="%Y-%m-%d"))
#Create a function that distinguises weekdays from weekends
activity$dayType <- sapply(activity$date, function(x) {
if(weekdays(x) == "Saturday" | weekdays(x) == "Sunday")
{y <- "Weekend"}
else {y <- "Weekday"}
y
})
#Make a panel plot containing a time series plot (i.e. type = “l”) of the 5-minute interval (x-axis) and the average number of steps taken, averaged across all weekday days or weekend days (y-axis). See the README file in the GitHub repository to see an example of what this plot should look like using simulated data.
#Create the data set that will be plotted
activityByDay <-  aggregate(steps ~ interval + dayType, activity, mean, na.rm = TRUE)
#Plot using ggplot2
dayPlot <-  ggplot(activityByDay, aes(x = interval , y = steps, color = dayType)) +
geom_line() + ggtitle("Average Daily Steps by Day Type") +
xlab("Interval") +
ylab("Average Number of Steps") +
facet_wrap(~dayType, ncol = 1, nrow=2) +
scale_color_discrete(name = "Day Type") +
theme_calc(base_family = "serif")
print(dayPlot)
activity$date <- as.POSIXct(activity$date, "%Y-%m-%d")
##Question 4 - Are there differences in activity patterns between weekdays and weekends?
#Create a new factor variable in the dataset with two levels – “weekday” and “weekend” indicating whether a given date is a weekday or weekend day.
#Update format of the dates
activity$date <- as.Date(strptime(activity$date, format="%Y-%m-%d"))
#Create a function that distinguises weekdays from weekends
activity$dayType <- sapply(activity$date, function(x) {
if(weekdays(x) == "Saturday" | weekdays(x) == "Sunday")
{y <- "Weekend"}
else {y <- "Weekday"}
y
})
#Make a panel plot containing a time series plot (i.e. type = “l”) of the 5-minute interval (x-axis) and the average number of steps taken, averaged across all weekday days or weekend days (y-axis). See the README file in the GitHub repository to see an example of what this plot should look like using simulated data.
#Create the data set that will be plotted
activityByDay <-  aggregate(steps ~ interval + dayType, activity, mean, na.rm = TRUE)
#Plot using ggplot2
dayPlot <-  ggplot(activityByDay, aes(x = interval , y = steps, color = dayType)) +
geom_line() + ggtitle("Average Daily Steps by Day Type") +
xlab("Interval") +
ylab("Average Number of Steps") +
facet_wrap(~dayType, ncol = 1, nrow=2) +
scale_color_discrete(name = "Day Type") +
theme_calc(base_family = "serif")
print(dayPlot)
activity$date <- as.Date(strptime(activity$date, format="%Y-%m-%d"))
#Create a function that distinguises weekdays from weekends
activity$dayType <- sapply(activity$date, function(x) {
if(weekdays(x) == "Saturday" | weekdays(x) == "Sunday")
{y <- "Weekend"}
else {y <- "Weekday"}
y
})
activityByDay <-  aggregate(steps ~ interval + dayType, activity, mean, na.rm = TRUE)
#Plot using ggplot2
dayPlot <-  ggplot(activityByDay, aes(x = interval , y = steps, color = dayType)) +
geom_line() + ggtitle("Average Daily Steps by Day Type") +
xlab("Interval") +
ylab("Average Number of Steps") +
facet_wrap(~dayType, ncol = 1, nrow=2) +
scale_color_discrete(name = "Day Type") +
theme_calc(base_family = "serif")
print(dayPlot)
activity$date <- as.Date(strptime(activity$date, format="%Y-%m-%d"))
#Create a function that distinguises weekdays from weekends
activity$dayType <- sapply(activity$date, function(x) {
if(weekdays(x) == "Saturday" | weekdays(x) == "Sunday")
{y <- "Weekend"}
else {y <- "Weekday"}
y
})
activityByDay <-  aggregate(steps ~ interval + dayType, activity, mean, na.rm = TRUE)
#Plot using ggplot2
dayPlot <-  ggplot(activityByDay, aes(x = interval , y = steps, color = dayType)) +
geom_line() + ggtitle("Average Daily Steps by Day Type") +
xlab("Interval") +
ylab("Average Number of Steps") +
facet_wrap(~dayType, ncol = 1, nrow=2) +
scale_color_discrete(name = "Day Type") +
theme_calc(base_family = "serif")
print(dayPlot)
activity$date <- as.Date(strptime(activity$date, format="%Y-%m-%d"))
#Create a function that distinguises weekdays from weekends
activity$dayType <- weekdays(activity$date)
for (i in l:nrow(activity)) {
if (activity[i,]$dayType %in% c(:Saturday,Sunday")) {
activity$date <- as.Date(strptime(activity$date, format="%Y-%m-%d"))
#Create a function that distinguises weekdays from weekends
activity$dayType <- weekdays(activity$date)
for (i in l:nrow(activity)) {
if (activity[i,]$dayType %in% c("Saturday","Sunday")) {
activity[i,]$dayType <- "Weekend"
}
else{
activity[i,]$dayType <- "Weekday"
}
}
activity$date <- as.Date(strptime(activity$date, format="%Y-%m-%d"))
#Create a function that distinguises weekdays from weekends
activity$dayType <- sapply(activity$date, function(x) {
if (weekdays(x) == "Saturday" | weekdays(x) == "Sunday")
{y <- "Weekend"}
else
{y <- "Weekday"}
y
})
activityByDay <-  aggregate(steps ~ interval + dayType, activity, mean, na.rm = TRUE)
#Plot using ggplot2
dayPlot <-  ggplot(activityByDay, aes(x = interval , y = steps, color = dayType)) +
geom_line() + ggtitle("Average Daily Steps by Day Type") +
xlab("Interval") +
ylab("Average Number of Steps") +
facet_wrap(~dayType, ncol = 1, nrow=2) +
scale_color_discrete(name = "Day Type") +
theme_calc(base_family = "serif")
print(dayPlot)
activity$date <- as.Date(strptime(activity$date, format = "%Y-%m-%d"))
#Create a function that distinguises weekdays from weekends
activity$dayType <- sapply(activity$date, function(x) {
if (weekdays(x) == "Saturday" | weekdays(x) == "Sunday")
{y <- "Weekend"}
else
{y <- "Weekday"}
})
activityByDay <-  aggregate(steps ~ interval + dayType, activity, mean, na.rm = TRUE)
#Plot using ggplot2
dayPlot <-  ggplot(activityByDay, aes(x = interval , y = steps, color = dayType)) +
geom_line() + ggtitle("Average Daily Steps by Day Type") +
xlab("Interval") +
ylab("Average Number of Steps") +
facet_wrap(~dayType, ncol = 1, nrow=2) +
scale_color_discrete(name = "Day Type") +
theme_calc(base_family = "serif")
print(dayPlot)
library(ggplot2)
library(tidyverse)
library(ggthemes)
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, fig.width = 10, fig.height = 5,
fig.keep = 'all' ,fig.path = 'figures\ ', dev = 'png')
path = getwd()
unzip("activity.zip", exdir = path)
activity <- read.csv("activity.csv")
activity$date <- as.POSIXct(activity$date, "%Y-%m-%d")
day <- weekdays(activity$date)
path = getwd()
unzip("activity.zip", exdir = path)
activityData <- read.csv("activity.csv")
summary(activityData)
names(activityData)
head(activity)
#Library setting
library(ggplot2)
library(tidyverse)
library(ggthemes)
#Unzip and read the file
path = getwd()
unzip("activity.zip", exdir = path)
activityData <- read.csv("activity.csv")
#View the processed data
summary(activityData)
#Check the names
names(activityData)
#Check the head
head(activity)
#Library setting
library(ggplot2)
library(tidyverse)
library(ggthemes)
#Unzip and read the file
path = getwd()
unzip("activity.zip", exdir = path)
activityData <- read.csv("activity.csv")
#View the processed data
summary(activityData)
#Check the names
names(activityData)
#Check the head
head(activity)
head(activityData)
pairs(activityData)
stepsPerDay <- aggregate(steps ~ date, activityData, sum, na.rm=TRUE)
hist(stepsPerDay$steps)
#The mean of the total number of steps taken per day is:
meanStepsPerDay <- mean(stepsPerDay$steps)
meanStepsPerDay
#The median of the total number of steps taken per day is:
medianStepsPerDay <- median(stepsPerDay$steps)
medianStepsPerDay
#Make a time series plot (i.e. 𝚝𝚢𝚙𝚎 = “𝚕”) of the 5-minute interval (x-axis) and the average number of steps taken, averaged across all days (y-axis)
stepsPerInterval<-aggregate(steps~interval, data=activityData, mean, na.rm=TRUE)
plot(steps~interval, data=stepsPerInterval, type="l")
#Which 5-minute interval, on average across all the days in the dataset, contains the maximum number of steps?
intervalWithMaxNbSteps <- stepsPerInterval[which.max(stepsPerInterval$steps),]$interval
intervalWithMaxNbSteps
hist(stepsPerDay$steps, title="Total number of steps taken each day")
hist(stepsPerDay$steps)
hist(stepsPerDay$steps)
hist(stepsPerDay$steps)
stepsPerInterval<-aggregate(steps~interval, data=activityData, mean, na.rm=TRUE)
plot(steps~interval, data=stepsPerInterval, type="l")
intervalWithMaxNbSteps <- stepsPerInterval[which.max(stepsPerInterval$steps),]$interval
intervalWithMaxNbSteps
totalValuesMissings <- sum(is.na(activityData$steps))
totalValuesMissings
getMeanStepsPerInterval<-function(interval){
stepsPerInterval[stepsPerInterval$interval==interval,]$steps
}
activityDataNoNA<-activityData
for(i in 1:nrow(activityDataNoNA)){
if(is.na(activityDataNoNA[i,]$steps)){
activityDataNoNA[i,]$steps <- getMeanStepsPerInterval(activityDataNoNA[i,]$interval)
}
}
totalStepsPerDayNoNA <- aggregate(steps ~ date, data=activityDataNoNA, sum)
hist(totalStepsPerDayNoNA$steps)
#The mean of the total number of steps taken per day is:
meanStepsPerDayNoNA <- mean(totalStepsPerDayNoNA$steps)
#The median of the total number of steps taken per day is:
medianStepsPerDayNoNA <- median(totalStepsPerDayNoNA$steps)
meanStepsPerDayNoNA <- mean(totalStepsPerDayNoNA$steps)
#The mean of the total number of steps taken per day is:
meanStepsPerDayNoNA <- mean(totalStepsPerDayNoNA$steps)
meanStepsPerDayNoNA
#The median of the total number of steps taken per day is:
medianStepsPerDayNoNA <- median(totalStepsPerDayNoNA$steps)
medianStepsPerDayNoNA
activityDataNoNA$date <- as.Date(strptime(activityDataNoNA$date, format="%Y-%m-%d"))
activityDataNoNA$day <- weekdays(activityDataNoNA$date)
for (i in 1:nrow(activityDataNoNA)) {
if (activityDataNoNA[i,]$day %in% c("Saturday","Sunday")) {
activityDataNoNA[i,]$day<-"weekend"
}
else{
activityDataNoNA[i,]$day<-"weekday"
}
}
stepsByDay <- aggregate(activityDataNoNA$steps ~ activityDataNoNA$interval + activityDataNoNA$day, activityDataNoNA, mean)
names(stepsByDay) <- c("interval", "day", "steps")
library(lattice)
xyplot(steps ~ interval | day, stepsByDay, type = "l", layout = c(1, 2),
xlab = "Interval", ylab = "Number of steps")
install.packages("lattice")
install.packages("lattice")
library(lattice)
names(stepsByDay) <- c("interval", "day", "steps")
library(lattice)
xyplot(steps ~ interval | day, stepsByDay, type = "l", layout = c(1, 2),
xlab = "Interval", ylab = "Number of steps")
names(stepsByDay) <- c("interval", "day", "steps")
library(lattice)
xyplot(steps ~ interval | day, stepsByDay, type = "l", layout = c(1, 2),
xlab = "Interval", ylab = "Number of steps")
library(ggplot2)
library(tidyverse)
library(ggthemes)
#Unzip and read the file
path = getwd()
unzip("activity.zip", exdir = path)
initialData <- read.csv("activity.csv", colClasses=c("numeric", "Date", "numeric"))
head(initialData)
str(initialData)
data <- initialData[!(is.na(initialData$steps)), ]
#Calculate total number of steps taken per day
totalStepsDay <- aggregate(steps ~ date, data, sum)
head(totalStepsDay)
#If you do not understand the difference between a histogram and a barplot, research the difference between them. Make a histogram of the total number of steps taken each day
paletteBlue <- colorRampPalette(c("skyblue", "darkblue", "skyblue"))
hist(totalStepsDay$steps, breaks=20, xlab="Number of Steps Taken",
main="Histogram of the Total Number of Steps Taken per Day",
col=paletteBlue(22), family="serif")
library(dplyr)
totalStepsSummary <- summarise(totalStepsDay, meanOfTotalSteps=mean(totalStepsDay$steps),
medianOfTotalSteps=median(totalStepsDay$steps))
print(totalStepsSummary)
#Make a time series plot (i.e. type = “𝚕”) of the 5-minute interval (x-axis) and the average number of steps taken, averaged across all days (y-axis)
meanStepsInterval <- aggregate(steps ~ interval, data, mean)
head(meanStepsInterval)
#Which 5-minute interval, on average across all the days in the dataset, contains the maximum number of steps?
plot(x=meanStepsInterval$interval, y=meanStepsInterval$steps, type="l",
main="Time Series Plot of Average Steps Taken per Interval",
ylab="Number of Steps", xlab="Intervals (in 5 mins)",
col="darkblue", lwd=1.5, family="serif")
meanStepsInterval[grep(max(meanStepsInterval$steps), meanStepsInterval$steps), ]
anyNA(initialData)
data.frame(steps=sum(is.na(initialData$steps)),
interval=sum(is.na(initialData$interval)),
date=sum(is.na(initialData$date)))
imputedData <- initialData
for(x in 1:17568) {
if(is.na(imputedData[x, 1])==TRUE) {
imputedData[x, 1] <- meanStepsInterval[meanStepsInterval$interval %in% imputedData[x, 3], 2]
}
}
head(imputedData)
imputedTotalStepsDay <- aggregate(steps ~ date, imputedData, sum)
head(imputedTotalStepsDay)
paletteRed <- colorRampPalette(c("deeppink", "darkred", "deeppink"))
hist(imputedTotalStepsDay$steps, breaks=20, xlab="Number of Steps Taken",
main="Histogram of Total Number of Steps Taken per Day (With Imputed Values)",
col=paletteRed(22), family="serif")
imputedStepsSummary <- summarise(imputedTotalStepsDay,
meanOfTotalSteps=mean(imputedTotalStepsDay$steps),
medianOfTotalSteps=median(imputedTotalStepsDay$steps))
print(imputedStepsSummary)
rbind(totalStepsSummary, imputedTotalStepsSummary)
rbind(totalStepsSummary, imputedStepsSummary)
par(mfrow = c(1, 2))
hist(totalStepsDay$steps, breaks=20, xlab="Number of Steps Taken",
col=paletteBlue(22), family="serif", ylim=c(0, 20), main=NULL)
hist(imputedTotalStepsDay$steps, breaks=20, xlab="Number of Steps Taken",
col=paletteRed(22), family="serif", ylim=c(0, 20), main=NULL)
mtext("Histograms of Total Number of Steps Taken per Day, Without/With Imputed Values",
adj=0.95, family="serif", font=2)
naByDate <- initialData[is.na(initialData$steps), ]
table(naByDate$date)
length(unique(data$interval))
daysData <- imputedData
daysData$days <- weekdays(daysData$date)
daysData$weekday <- as.character(rep(0, times=17568))
for(x in 1:17568) {
if(daysData[x, 4] %in% c("Saturday", "Sunday")) {
daysData[x, 5] <- "weekend"
} else {
daysData[x, 5] <- "weekday"
}
}
daysData$weekday <- factor(daysData$weekday)
head(daysData)
weekdayData <- daysData[daysData$weekday=="weekday", ]
weekendData <- daysData[daysData$weekday=="weekend", ]
weekdayMean <- aggregate(steps ~ interval, weekdayData, mean)
weekendMean <- aggregate(steps ~ interval, weekendData, mean)
par(mfrow=c(2, 1), mar=c(4, 4.1, 3, 2.1))
plot(weekdayMean$interval, weekdayMean$steps, type="l",
main="Time Series Plot of Average Steps Taken per Interval, for Weekdays",
xlab="Intervals (in 5 mins)", ylab="Number of Steps", family="serif",
col="darkred", lwd=1.5, ylim=c(0, 230))
plot(weekendMean$interval, weekendMean$steps, type="l",
main="Time Series Plot of Average Steps Taken per Interval, for Weekends",
xlab="Intervals (in 5 mins)", ylab="Number of Steps", family="serif",
col="darkblue", lwd=1.5, ylim=c(0, 230))
weekdayData <- daysData[daysData$weekday=="weekday", ]
weekendData <- daysData[daysData$weekday=="weekend", ]
#Next, the average number of steps per interval is calculated, much like it has been done in previous questions.
weekdayMean <- aggregate(steps ~ interval, weekdayData, mean)
weekendMean <- aggregate(steps ~ interval, weekendData, mean)
par(mfrow=c(2, 1), mar=c(4, 4.1, 3, 2.1))
plot(weekdayMean$interval, weekdayMean$steps, type="l",
main="Time Series Plot of Average Steps Taken per Interval, for Weekdays",
xlab="Intervals (in 5 mins)", ylab="Number of Steps", family="serif",
col="darkred", lwd=1.5, ylim=c(0, 230))
plot(weekendMean$interval, weekendMean$steps, type="l",
main="Time Series Plot of Average Steps Taken per Interval, for Weekends",
xlab="Intervals (in 5 mins)", ylab="Number of Steps", family="serif",
col="darkblue", lwd=1.5, ylim=c(0, 230))
weekdayData <- daysData[daysData$weekday=="weekday", ]
weekendData <- daysData[daysData$weekday=="weekend", ]
#Next, the average number of steps per interval is calculated, much like it has been done in previous questions.
weekdayMean <- aggregate(steps ~ interval, weekdayData, mean)
weekendMean <- aggregate(steps ~ interval, weekendData, mean)
View(weekdayData)
daysData <- imputedData
anyNA(initialData)
library(ggplot2)
library(tidyverse)
library(ggthemes)
#Unzip and read the file
path = getwd()
unzip("activity.zip", exdir = path)
library(ggplot2)
library(tidyverse)
library(ggthemes)
#Unzip and read the file
path = getwd()
unzip("activity.zip", exdir = path)
initialData <- read.csv("activity.csv", colClasses=c("numeric", "Date", "numeric"))
head(initialData)
str(initialData)
##Question 1 - What is the mean total number of steps taken per day?
data <- initialData[!(is.na(initialData$steps)), ]
#Calculate total number of steps taken per day
totalStepsDay <- aggregate(steps ~ date, data, sum)
head(totalStepsDay)
#If you do not understand the difference between a histogram and a barplot, research the difference between them. Make a histogram of the total number of steps taken each day
paletteBlue <- colorRampPalette(c("skyblue", "darkblue", "skyblue"))
hist(totalStepsDay$steps, breaks=20, xlab="Number of Steps Taken",
main="Histogram of the Total Number of Steps Taken per Day",
col=paletteBlue(22), family="serif")
#The mean, median of the total number of steps taken per day is:
library(dplyr)
totalStepsSummary <- summarise(totalStepsDay, meanOfTotalSteps=mean(totalStepsDay$steps),
medianOfTotalSteps=median(totalStepsDay$steps))
print(totalStepsSummary)
##Question 2 - What is the average daily activity pattern?
#Make a time series plot (i.e. type = “𝚕”) of the 5-minute interval (x-axis) and the average number of steps taken, averaged across all days (y-axis)
meanStepsInterval <- aggregate(steps ~ interval, data, mean)
head(meanStepsInterval)
plot(x=meanStepsInterval$interval, y=meanStepsInterval$steps, type="l",
main="Time Series Plot of Average Steps Taken per Interval",
ylab="Number of Steps", xlab="Intervals (in 5 mins)",
col="darkblue", lwd=1.5, family="serif")
#Which 5-minute interval, on average across all the days in the dataset, contains the maximum number of steps?
meanStepsInterval[grep(max(meanStepsInterval$steps), meanStepsInterval$steps), ]
##Question 3 - Imputing Missing Values
#As the data can be confirmed to contain some NA values as some of the observations:
anyNA(initialData)
#It is necessary to find out whether the NA values are more-so clustered to one area within the data. Looking at each of the variables:
data.frame(steps=sum(is.na(initialData$steps)),
interval=sum(is.na(initialData$interval)),
date=sum(is.na(initialData$date)))
#I used a for loop to achieve this, first testing if each observation was an NA value, and if so, replacing it with the mean average for that interval, (as calculated in a previous question).
imputedData <- initialData
for(x in 1:17568) {
if(is.na(imputedData[x, 1])==TRUE) {
imputedData[x, 1] <- meanStepsInterval[meanStepsInterval$interval %in% imputedData[x, 3], 2]
}
}
head(imputedData)
#Now that the NA values have been replaced, a histogram from the imputed data can be created. This histogram should indicate the frequency of the total number of steps taken per day. Therefore again, the data must be grouped and "summed" by day.
imputedTotalStepsDay <- aggregate(steps ~ date, imputedData, sum)
head(imputedTotalStepsDay)
#Creating the histogram:
paletteRed <- colorRampPalette(c("deeppink", "darkred", "deeppink"))
hist(imputedTotalStepsDay$steps, breaks=20, xlab="Number of Steps Taken",
main="Histogram of Total Number of Steps Taken per Day (With Imputed Values)",
col=paletteRed(22), family="serif")
#The question then asks for calculation of the mean and median total number of steps taken per day, which can be calculated using the summarise function.
imputedStepsSummary <- summarise(imputedTotalStepsDay,
meanOfTotalSteps=mean(imputedTotalStepsDay$steps),
medianOfTotalSteps=median(imputedTotalStepsDay$steps))
print(imputedStepsSummary)
#This a similar calculation to the one completed at the start of the assignment, (without the imputed values,) and thus they can be compared.
rbind(totalStepsSummary, imputedStepsSummary)
#If histograms of the two data sets (imputed and non-imputed) are compared:
par(mfrow = c(1, 2))
hist(totalStepsDay$steps, breaks=20, xlab="Number of Steps Taken",
col=paletteBlue(22), family="serif", ylim=c(0, 20), main=NULL)
hist(imputedTotalStepsDay$steps, breaks=20, xlab="Number of Steps Taken",
col=paletteRed(22), family="serif", ylim=c(0, 20), main=NULL)
mtext("Histograms of Total Number of Steps Taken per Day, Without/With Imputed Values",
adj=0.95, family="serif", font=2)
#More explanations for the differences between the non and imputed data sets can be seen by looking at the NA values grouped by their date variable.
naByDate <- initialData[is.na(initialData$steps), ]
table(naByDate$date)
#As there are exactly 288 intervals measured for each day:
length(unique(data$interval))
daysData <- imputedData
daysData$days <- weekdays(daysData$date)
daysData$weekday <- as.character(rep(0, times=17568))
for(x in 1:17568) {
if(daysData[x, 4] %in% c("Saturday", "Sunday")) {
daysData[x, 5] <- "weekend"
} else {
daysData[x, 5] <- "weekday"
}
}
daysData$weekday <- factor(daysData$weekday)
head(daysData)
View(daysData)
daysData <- imputedData
daysData$days <- weekdays(daysData$date)
daysData$weekday <- as.character(rep(0, times=17568))
for(x in 1:17568) {
if(daysData[x, 4] %in% c("토요일", "일요일")) {
daysData[x, 5] <- "weekend"
} else {
daysData[x, 5] <- "weekday"
}
}
daysData$weekday <- factor(daysData$weekday)
head(daysData)
#To compare the weekday and weekend data, and create two plots of the average number of steps taken per interval, the data has to be split into two groups of weekday/weekend data, using the newly created variable.
weekdayData <- daysData[daysData$weekday=="weekday", ]
weekendData <- daysData[daysData$weekday=="weekend", ]
#Next, the average number of steps per interval is calculated, much like it has been done in previous questions.
weekdayMean <- aggregate(steps ~ interval, weekdayData, mean)
weekendMean <- aggregate(steps ~ interval, weekendData, mean)
#Finally the panel plot is created. The x axis indicates each 5 minute interval, and the y axis shows the average number of steps taken. The two plots are divided into weekday, and weekend data.
par(mfrow=c(2, 1), mar=c(4, 4.1, 3, 2.1))
plot(weekdayMean$interval, weekdayMean$steps, type="l",
main="Time Series Plot of Average Steps Taken per Interval, for Weekdays",
xlab="Intervals (in 5 mins)", ylab="Number of Steps", family="serif",
col="darkred", lwd=1.5, ylim=c(0, 230))
plot(weekendMean$interval, weekendMean$steps, type="l",
main="Time Series Plot of Average Steps Taken per Interval, for Weekends",
xlab="Intervals (in 5 mins)", ylab="Number of Steps", family="serif",
col="darkblue", lwd=1.5, ylim=c(0, 230))
